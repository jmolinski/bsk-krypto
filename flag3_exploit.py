import string
from os import urandom
from collections import Counter, defaultdict

CHARSET = string.ascii_letters + string.digits + "{}_"
FLAG3_PROBES = 60000


def exploit_flag3(get_encrypted_flag) -> None:
    f3s = [get_encrypted_flag() for _ in range(FLAG3_PROBES)]

    nth_char_positions = defaultdict(list)
    for f in f3s:
        for i, c in enumerate(f):
            nth_char_positions[i].append(CHARSET.index(c))

    nth_char_least_common = {
        k: get_least_common_keys(Counter(v), 4) for k, v in nth_char_positions.items()
    }

    least_likely_by_char = get_least_likely_encrypted_values_for_chars()
    char_by_least_likely = {v: k for k, v in least_likely_by_char.items()}

    flag3 = "".join(
        char_by_least_likely[nth_char_least_common[k]]
        for k in sorted(nth_char_least_common.keys())
    )
    print("Exploited flag 3:", flag3)


def get_least_common_keys(c: Counter[int, int], n: int) -> tuple[int, ...]:
    return tuple(sorted(k for (k, _) in c.most_common()[-n:]))


def get_least_likely_encrypted_values_for_chars():
    keys = [urandom(1)[0] % len(CHARSET) for _ in range(200000)]

    least_common_enc_for_char = {}
    for char in CHARSET:
        char_idx = CHARSET.index(char)
        c = Counter((char_idx + key) % len(CHARSET) for key in keys)
        least_common_enc_for_char[char] = get_least_common_keys(c, 4)

    return least_common_enc_for_char
